FUNCTION_BLOCK "FB_IM2x2"
{ S7_Optimized_Access := 'FALSE' }
AUTHOR : Ivanez
VERSION : 0.1
//Исполнительный механизм (2 команды, 2 положения)
   VAR_INPUT 
      OnSig : Bool;   //      Сигнал сработавшего открытого (выдвинутого)
      OffSig : Bool;   //      Сигнал сработавшего закрытого (задвинутого)
      sigFeedBack : Bool;   // Обратная связь
      hasFeedBack : Bool;   // Есть ли обратная связь
      OnCom : Bool;   //      Команда включения в автоматическом режиме
      OffCom : Bool;   //      Команда отключения в автоматическом режиме
      Ready : Bool;   //      Условие готовности
      Reset : Bool;   //      Сброс
      btnAU : Bool;   //      Перевести в Автоматическое управление
      btnDU : Bool;   //      Перевести в Дистанционное управление
      prmDU : Bool;   //      Разрешение на перевод в ДУ
      btnDU_ON : Bool;   //      Включить в дистанционном управлении
      btnDU_OF : Bool;   //      Отключить в дистанционном управлении
      btnMU : Bool;   //      Перевести в местное управление
      btnMU_ON : Bool;   //      Включить в местном управлении
      btnMU_OF : Bool;   //      Отключить в местном управлении
      protection : Bool;   //      Условие включение защиты
      Set_T_notON : Time;   //      Задержа на формирование неоткрытие
      Set_T_notOFF : Time;   //      Задержа на формирование незакрытие
      time_notFeedBack : Time;
      time_notCMD : Time;
      setSpeedAU : Real;   //      Скорость в режиме автомат
      setSpeedDU : Real;   //      Скорость в режиме ДУoutputs
   END_VAR

   VAR_OUTPUT 
      AU : Bool;   //      Автоматическое управление (АУ)
      DU : Bool;   //      Дистанционное управление (ДУ)
      MU : Bool;   //      Местное управление (МУ)
      wrong_state : Bool;   //  Некорректное состояние
      notON : Bool;   //      Предупреждение о невключении
      notOFF : Bool;   //      Предупреждение о неотключении
      notCMD : Bool;
      notFeedBack : Bool;
      Fault : Bool;   //      Неисправность
      onOutFWD : Bool;   //      Сигнал на открытие (выдвинуть)
      onOutBWD : Bool;   //      Сигнал на закрытие (задвинуть)
      PRM_btnDU_ON : Bool;   //      Разрешение кнопки включения в ДУ
      PRM_btnDU_OFF : Bool;   //      Разрешение кнопки отключения в ДУ
      setSpeed : Real;   //      скорость в автомате для частотникаvariables
   END_VAR

   VAR 
      sigOnOut : Bool;   //      Сигналоткрытия
      sigOffOut : Bool;   //      Сигнал закрытия
      T_notON_TON {InstructionName := 'TON'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON;   //      Таймер неоткрытия
      T_notOFF_TON {InstructionName := 'TON'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON;   //      Таймер незакрытия
      T_notFeedback {InstructionName := 'TON'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON;
      T_notCMD {InstructionName := 'TON'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON;
   END_VAR


BEGIN
	//Формирование автоматического управления
	IF #btnAU THEN
	    #AU := true;
	    #DU := false;
	    #MU := false;
	END_IF;
	//Формирование дистанционного управления 
	IF #btnDU THEN
	    #DU := true;
	    #AU := false;
	    #MU := false;
	END_IF;
	//Формирование местного управления
	IF #btnMU THEN
	    #MU := true;
	    #AU := false;
	    #DU := false;
	END_IF;
	
	IF NOT #AU AND NOT #DU AND NOT #MU THEN
	    #MU := true;
	END_IF;
	
	//Разрешения кнопок управления
	#PRM_btnDU_ON := (NOT #OnSig AND #DU OR #notON);
	#PRM_btnDU_OFF := (NOT #OffSig AND #DU OR #notOFF);
	
	//Формирование выходного сигнала открытия (выдвижение)
	#sigOnOut := #Ready AND ((#sigOnOut
	OR #AU AND #OnCom
	OR #DU AND #btnDU_ON
	OR #MU AND #btnMU_ON
	)
	AND NOT
	(#OnSig
	OR #AU AND #OffCom
	OR #DU AND #btnDU_OF
	OR #MU AND #btnMU_OF
	OR #Fault));
	
	
	//Формирование выходного сигнала закрытия (задвижение)
	#sigOffOut := #Ready AND ((#sigOffOut
	OR #AU AND #OffCom
	OR #DU AND #btnDU_OF
	OR #MU AND #btnMU_OF
	)
	AND NOT
	(#OffSig
	OR #AU AND #OnCom
	OR #DU AND #btnDU_ON
	OR #MU AND #btnMU_ON
	OR #Fault));
	
	//Выбор выхода ВПЕРЕД НАЗАД
	#onOutFWD := #sigOnOut;
	#onOutBWD := #sigOffOut;
	
	//Неисправности
	#T_notON_TON(
	             IN := (#sigOnOut AND NOT #OnSig AND NOT #Reset),
	             PT := #Set_T_notON
	);
	
	#notON := (#notON OR #T_notON_TON.Q) AND NOT #Reset;
	
	#T_notOFF_TON(
	              IN := (#sigOffOut AND NOT #OffSig AND NOT #Reset),
	              PT := #Set_T_notOFF
	);
	
	#notOFF := (#notOFF OR #T_notOFF_TON.Q) AND NOT #Reset;
	
	
	#T_notFeedback(
	               IN := ((#sigOffOut OR #sigOnOut) AND NOT #sigFeedBack AND #hasFeedBack AND NOT #Reset),
	               PT := #time_notFeedBack
	);
	
	#notFeedBack := (#notFeedBack OR #T_notFeedback.Q) AND NOT #Reset;
	
	#T_notCMD(
	          IN := ( NOT (#sigOffOut OR #sigOnOut) AND #sigFeedBack AND #hasFeedBack AND NOT #Reset),
	          PT := #time_notCMD
	);
	
	#notCMD := (#notCMD OR #T_notCMD.Q) AND NOT #Reset;
	
	
	#wrong_state := (#OnSig AND #OffSig);
	
	//Обобщенная неисправность
	#Fault := #notON OR #notOFF OR #wrong_state OR #notCMD OR #notFeedBack;
	
	IF #DU THEN
	    #setSpeed := #setSpeedDU;
	ELSE
	    #setSpeed := #setSpeedAU;
	END_IF;
	
	
END_FUNCTION_BLOCK

